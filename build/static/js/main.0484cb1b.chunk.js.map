{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","props","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","message","className","key","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"+PAeeA,EAZF,SAACC,GAAW,IACdC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,iBACPC,EAAQF,EAAKG,UACb,qBAAuB,iBAC7B,OACI,4BACKH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,KCYjC,EAjBA,WAEb,OADgBI,IAAMC,IAHR,UAICC,KAAK,SAAAC,GAClB,OAAOA,EAASC,QAcL,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAVR,SAUsBD,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAfF,SAeE,YAAwBD,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,Q,4NCd3C,IA+IeK,EA/IH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,yBAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAsBdC,oBAhBgB,WACdC,QAAQC,IAAI,gCACZC,IAEGpB,KAAK,SAAAqB,GACNX,EAASW,MAWM,IACnBH,QAAQC,IAAI,SAAUV,EAAMa,OAAQ,SAIpC,IAAMC,EAAcV,EAClBJ,EAAQA,EAAMe,OAAO,SAAAhC,GAAI,OAAuB,IAAnBA,EAAKG,YAgD9B8B,EAAqB,SAACpB,GAE1B,IAAMb,EAAOiB,EAAMiB,KAAK,SAAAC,GAAC,OAAIA,EAAEtB,KAAOA,IAChCuB,E,qVAAW,IAAQpC,EAAR,CAAcG,WAAYH,EAAKG,YAEhDyB,EACQf,EAAIuB,GACT5B,KAAK,SAAA6B,GACNnB,EAASD,EAAMqB,IAAI,SAAAtC,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOqC,OAEpDE,MAAM,SAAAC,GACLhB,EAAgB,SAAD,OACJxB,EAAKI,QADD,sCAGfqC,WAAW,WACTjB,EAAgB,OACf,KACHN,EAASD,EAAMe,OAAO,SAAAG,GAAC,OAAIA,EAAEtB,KAAOA,QAqBxC,OACE,6BAEE,qCAEA,kBAlBiB,SAAC,GAAiB,IAAf6B,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKC,UAAU,SACZD,IAWH,CAAcA,QAASnB,IAEvB,6BACE,4BAAQlB,QAlDM,WAClBiB,GAAYD,KAkDLA,EAAU,iBAAmB,aAIlC,4BA/FEU,EAAYO,IAAI,SAAAtC,GAAI,OAChB,kBAAC,EAAD,CACE4C,IAAK5C,EAAKa,GACVb,KAAMA,EACNC,iBAAkB,kBAAMgC,EAAmBjC,EAAKa,UA+FxD,0BAAMgC,SAxFM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB5C,QAASe,EACT8B,MAAM,IAAIC,MAAOC,cACjBhD,UAAWiD,KAAKC,SAAW,IAG7BzB,EACQoB,GACLxC,KAAK,SAAA6B,GACNnB,EAASD,EAAMqC,OAAOjB,IACtBjB,EAAW,QA6ET,2BACEmC,MAAOpC,EACPqC,SAnEiB,SAACV,GACxBpB,QAAQC,IAAImB,EAAMW,OAAOF,OACzBnC,EAAW0B,EAAMW,OAAOF,UAmEpB,4BAAQG,KAAK,UAAb,e,MCxIVC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.0484cb1b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//OMA VERSIO KOMPONENTISTA:\r\nconst Note = (props) => {\r\n    const {note, toggleImportance} = props\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n    return (\r\n        <li>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note\r\n\r\n\r\n","import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/notes'\r\n//const baseUrl = 'https://dry-inlet-79198.herokuapp.com/notes'\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => {\r\n    return response.data\r\n  })\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update \r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Note from './components/Note.js'\r\nimport noteService from './services/notes.js'\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState('Jotain virheitä...')\r\n\r\n    const haeData = () => {\r\n      console.log('Kutsuttiin useEffect-metodia')\r\n      noteService\r\n      .getAll()\r\n        .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n      // axios\r\n      //   .get('http://localhost:3001/notes/')\r\n      //   .then(response => {\r\n      //     console.log('promise fulfilled')\r\n      //     console.log('data: ', response.data)\r\n      //     setNotes(response.data)\r\n      //   })\r\n    }\r\n    \r\n    useEffect(haeData, [])\r\n    console.log('render', notes.length, 'notes')\r\n    \r\n    //muuttujan arvoksi asetetaan 'notes' jos showAll on true\r\n    //ja 'notes.filter..' jos showAll on false\r\n    const notesToShow = showAll\r\n    ? notes : notes.filter(note => note.important === true)\r\n  \r\n    const allNotes = () => {\r\n        return (\r\n          notesToShow.map(note => \r\n              <Note \r\n                key={note.id} \r\n                note={note}\r\n                toggleImportance={() => toggleImportanceOf(note.id)}/>\r\n              )\r\n        )\r\n    }\r\n\r\n    // TAPAHTUMANKÄSITTELIJÄT\r\n\r\n    const addNote = (event) => {\r\n      event.preventDefault()\r\n      const noteObject = {\r\n        content: newNote,\r\n        date: new Date().toISOString(),\r\n        important: Math.random() > 0.5,\r\n      }\r\n\r\n      noteService\r\n      .create(noteObject)\r\n        .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n      // axios\r\n      //   .post('http://localhost:3001/notes', noteObject)\r\n      //   .then(response => {\r\n      //     //concat luo uuden taulukon johon lisää halutun jutun\r\n      //     setNotes(notes.concat(response.data))\r\n      //     setNewNote('')\r\n      //   console.log(response)\r\n      // })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n      console.log(event.target.value)\r\n      setNewNote(event.target.value)\r\n    }\r\n\r\n    const handleClick = () => {\r\n      setShowAll(!showAll)\r\n    }\r\n\r\n    const toggleImportanceOf = (id) => {\r\n      //const url = `http://localhost:3001/notes/${id}`\r\n      const note = notes.find(n => n.id === id)\r\n      const changedNote = { ...note, important: !note.important }\r\n    \r\n      noteService\r\n      .update(id, changedNote)\r\n        .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n      // axios.put(url, changedNote).then(response => {\r\n      //   setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n      // })\r\n\r\n    }\r\n\r\n    const Notification = ({ message }) => {\r\n      if (message === null) {\r\n        return null\r\n      }\r\n    \r\n      return (\r\n        <div className=\"error\">\r\n          {message}\r\n        </div>\r\n      )\r\n    }\r\n\r\n  \r\n    return (\r\n      <div>\r\n\r\n        <h1>Notes</h1>\r\n\r\n        <Notification message={errorMessage} />\r\n\r\n        <div>\r\n          <button onClick={handleClick}>\r\n            {showAll ? 'show important' : 'show all' }\r\n          </button>\r\n        </div>\r\n\r\n        <ul>\r\n          {allNotes()}\r\n        </ul>\r\n\r\n        <form onSubmit={addNote}>\r\n          <input \r\n            value={newNote} \r\n            onChange={handleNoteChange}\r\n          />\r\n          <button type=\"submit\">tallenna</button>\r\n        </form> \r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}